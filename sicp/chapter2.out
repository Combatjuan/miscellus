Enumerate
(1 2 3 4 5 6 7 8 9 10)
Filter
(1 3 5 7 9)
Accumulate
120

----------------------------------------
- Excercise 2.17
----------------------------------------
(3)

----------------------------------------
- Exercise 2.18
----------------------------------------
(6 5 4 3 2 1)
(((((((() . 7) . 6) . 5) . 4) . 3) . 2) . 1)

----------------------------------------
- Exercise 2.20
----------------------------------------
(1 3 8)
(1 3 5 7)
(2 4 6)

----------------------------------------
- Exercise 2.25
----------------------------------------
7
7
7

----------------------------------------
- Exercise 2.27 'Deep Reverse'
----------------------------------------
  ((1 2) (3 4)) -> ((4 3) (2 1))
((5 4 3) (2 1))

----------------------------------------
- Exercise 2.28 'Fringe'
----------------------------------------
  ((1 2) (3 4)) -> (1 2 3 4)
(1 2 3 4)
(1 2 3 4 5 6 7 8 9)

----------------------------------------
- Exercise 2.29 'Mobile
----------------------------------------
simple mobile:
((10 . 5) 2 . 25)
30
complex mobile:
((16 (2 . 3) 3 . 2) 8 (2 . 6) 3 . 4)
15
unbalanced mobile:
((4 (1 . 3) 3 . 1) 2 (6 . 1) 2 . 3)
8
5
#t
#t
#f

----------------------------------------
- Exercise 2.31 'map-tree'
----------------------------------------
((1 4) (9 16 (25) (36 49)))

----------------------------------------
- Exercise 2.32 'subsets'
----------------------------------------
(1 2 3 4)
(2 3 4)
(3 4)
(4)
()
(() (4) (3) (3 4) (2) (2 4) (2 3) (2 3 4) (1) (1 4) (1 3) (1 3 4) (1 2) (1 2 4) (1 2 3) (1 2 3 4))

----------------------------------------
- Exercise 2.33 'subsets'
----------------------------------------
(1 4 9)
(1 2 3)
(1 2 3 4 5 6)
5

----------------------------------------
- Exercise 2.34 'Horner'
----------------------------------------
17

----------------------------------------
- Exercise 2.35 'More Leaf Counting'
----------------------------------------
7

----------------------------------------
- Exercise 2.40 'Unique Pairs'
----------------------------------------

----------------------------------------
- Exercise 2.42 'Three Adderands
----------------------------------------

----------------------------------------
- Exercise 2.53 Evaluating Quote
----------------------------------------
#t
#f
(a b c)
((george))
((y1 y2))
(y1 y2)
#f
#f
#t

----------------------------------------
- Exercise 2.54 Implement equal? (List equality)
----------------------------------------
#t
#f
#f
#f
#f
#t

----------------------------------------
- Exercise 2.55 Quotable quotes
----------------------------------------
quote

----------------------------------------
- Symbolic Algebra
----------------------------------------
(+ 1 0)
(+ (* x 0) (* 1 y))
(+ (* (* x y) (+ 1 0)) (* (+ (* x 0) (* 1 y)) (+ x 3)))
New and improved
1
y
(+ (* x y) (* y (+ x 3)))

----------------------------------------
- Exercise 2.56
----------------------------------------
(+ 2 2)
 -> 4
FAIL:
(+ 2 2)
 -> 4
 <> 5
Testing exponentiation
(** 2 10)
 -> 1024
(** 5 0)
 -> 1
(** 3 4)
 -> 81
(** 1000000 1)
 -> 1000000
1
 -> 1
(quote y)
 -> y
(map square (quote (1 2 3)))
 -> (1 4 9)
(deriv (quote (** x 2)) (quote x))
 -> (* 2 x)
FAIL:
(deriv (quote (+ (* 5 (** x 3)) (* 2 (** x 2)))) (quote x))
 -> (+ (* 5 (* 3 (** x 2))) (* 2 (* 2 x)))
 <> (+ (* 15 (** x 2) (* 4 x)))

----------------------------------------
- Exercise 2.57 - Handle n-ary + and * operators
----------------------------------------
(+ (* x y) (* y (+ x 3)))
(+ (* 3 (** x 2)) (+ (* 4 (* 2 x)) 8))
FAIL:
(deriv (quote (+ (** x 3) (* 4 (** x 2)) (* 8 x) 9)) (quote x))
 -> (+ (* 3 (** x 2)) (+ (* 4 (* 2 x)) 8))
 <> (+ (* 3 (** x 2)) (* 8 x) 8)

----------------------------------------
- Exercise 2.59 - Sets (implement union)
----------------------------------------
(element-of-set? 5 (quote (1 2 3 4 5 6)))
 -> #t
(element-of-set? 5 (quote (2 4 6)))
 -> #f
(element-of-set? 5 (quote ()))
 -> #f

(adjoin-set 1 (quote (2 3 4)))
 -> (1 2 3 4)
(adjoin-set (quote a) (quote (b c d)))
 -> (a b c d)
(adjoin-set (quote a) (quote (b c d)))
 -> (a b c d)
(adjoin-set (quote a) (quote (a b c d)))
 -> (a b c d)
(adjoin-set (quote a) (quote ()))
 -> (a)

(intersect-set (quote (1 2 3)) (quote (4 5 6)))
 -> ()
(intersect-set (quote (1 2 3)) (quote (2 4 6)))
 -> (2)

(union-set (quote (1 2)) (quote (3 4)))
 -> (1 2 3 4)
(union-set (quote (1 2 3)) (quote (3 4 5)))
 -> (1 2 3 4 5)
(union-set (quote ()) (quote (1 2)))
 -> (1 2)
(union-set (quote (1 2)) (quote ()))
 -> (1 2)

----------------------------------------
- Excercise 2.60 - Sets that allow duplicates.
----------------------------------------
(element-of-set? 3 (quote (1 2 3 2 1 2 1 5)))
 -> #t
(element-of-set? 8 (quote (1 2 3 2 1 2 1 5)))
 -> #f
(2 4 2 3 1 5 1 1 3)
(1 3 1 3)

----------------------------------------
- Exercise 2.62 - O(n) implementation of union-set for sets as ordered lists.
----------------------------------------
(union-set-ordered (quote (1 2)) (quote (3 4)))
 -> (1 2 3 4)
(union-set-ordered (quote (1 2 3)) (quote (3 4 5)))
 -> (1 2 3 4 5)
(union-set-ordered (quote ()) (quote (1 2)))
 -> (1 2)
(union-set-ordered (quote (1 2)) (quote ()))
 -> (1 2)

----------------------------------------
- Excercise 2.63 - Tree to list implementations
----------------------------------------
(1 2 3 31 32)
(1 2 3 31 32)

----------------------------------------
- Exercise 2.64 - List to Tree
----------------------------------------
(9 (3 (1 () ()) (5 () (7 () ()))) (15 (11 () (13 () ())) (17 () (19 () ()))))
(10 (4 (2 () ()) (6 () (8 () ()))) (16 (12 () (14 () ())) (18 () (20 () ()))))
(10 (5 (2 (1 () ()) (3 () (4 () ()))) (7 (6 () ()) (8 () (9 () ())))) (15 (12 (11 () ()) (13 () (14 () ()))) (18 (16 () (17 () ())) (19 () (20 () ())))))
(list->tree (enumerate-interval 1 3))
 -> (2 (1 () ()) (3 () ()))
(list->tree (quote (1 3 5 7 9 11)))
 -> (5 (1 () (3 () ())) (9 (7 () ()) (11 () ())))

----------------------------------------
- Exercise 2.65 - Implement union-tree and intersect-tree for binary tree representation
----------------------------------------
(intersect-tree (list->tree (quote (1 2))) (list->tree (quote (2 3))))
 -> (2 () ())
(union-tree (list->tree (quote (0 1))) (list->tree (quote (1 2))))
 -> (1 (0 () ()) (2 () ()))

----------------------------------------
- Exercise 2.66 - Implement lookup on key/values
----------------------------------------

----------------------------------------
- Exercise 2.67 - Define an encoding tree and a sample message.
----------------------------------------
(A D A B B C A)

----------------------------------------
- Exercise 2.68 - Encode
----------------------------------------
(encode-symbol (quote A) sample-tree)
 -> (0)
(encode-symbol (quote B) sample-tree)
 -> (1 0)
(encode-symbol (quote C) sample-tree)
 -> (1 1 1)
(encode-symbol (quote D) sample-tree)
 -> (1 1 0)
(encode (quote (A D A B B C A)) sample-tree)
 -> (0 1 1 0 0 1 0 1 0 1 1 1 0)

----------------------------------------
- Exercise 2.69 - Successive Merge
----------------------------------------
((leaf (quote D) 1) (leaf (quote C) 1) (leaf (quote B) 2) (leaf (quote A) 4))
((A 8) (B 3) (C 1) (D 1) (E 1) (F 1) (G 1) (H 1))
((A B C D E F G H) 17 (leaf A 8) ((B C D E F G H) 9 ((B C D) 5 (leaf B 3) ((C D) 2 (leaf C 1) (leaf D 1))) ((E F G H) 4 ((E F) 2 (leaf E 1) (leaf F 1)) ((G H) 2 (leaf G 1) (leaf H 1)))))
(leaf A 1)
((A B) 3 (leaf A 2) (leaf B 1))
