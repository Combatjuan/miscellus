1.1 Evaluate
	10
->	10

	(+ 5 3 4)
->	12

	(- 9 1)
->	8

	(/ 6 2)
->	3

	(+ (* 2 4) (- 4 6))
->	6

	(define a 3)
	(define b (+ a 1))
	(+ a b (* a b))
->	19
	(= a b)
-> #f
	(if (and (> b a) (< b (* a b)))
		b
		a)
->	4
	(cond 
		((= a 4) 6)
		((= b 4) (+ 6 7 a))
		(else 25))
->	16
	(+ 2 (if (> b a) b a))
->	6
	(* 
		(cond ((> a b) a)
			((< a b) b)
			(else -1))
		(+ a 1))
->	16

1.2 Translate some big expression into prefix form
->	(/ (+ 5 4 (- 2 (- 3 (+ 6 (/ 4 5))))) (* 3 (- 6 2) (- 2 7)))

1.3 Define a procedure that takes three numbers as arguments and returns the sum of the
squares of the two larger numbers.
; We want to square the two that aren't the smallest
; In the case of a tie, it doesn't matter which of the tied are chosen.
; So there is a big giant way where you take condition like this:
; a > b > c -> ab
; a > c > b -> ac
; b > a > c -> ab
; b > c > a -> bc
; c > a > b -> ac
; c > b > a -> bc
; a = b > c -> ab
; a = c > b -> ac
; b = c > a -> bc
; a > b = c -> ab or ac
; b > a = c -> ab or bc
; c > a = b -> ca or cb
; a = b = c -> ab or ac or bc
; But that's unwieldy.  Let's be smaller.
; My first few attempts at a solution were variations of this form and were wrong:
	(define (sum-squares-of-two-largest a b c)
		(cond
			((and (< a b) (< a c)) (+ (square b) (square c)))
			((and (< b a) (< b c)) (+ (square a) (square c)))
			(else (+ (square a) (square b))))
; a = b > c -> FAIL
; Then I saw a better way:
	(define (sum-squares-of-two-largest a b c)
		(+ 
			(square (if (> a b) a b))
			(square (if (> a c) a c))))
; It too was bad.
; a > b > c -> FAIL
; Subfunctions!
	(define (sum-square-of-two-largest a b c)
		(define (smaller-of x y) (if (< x y) x y))
		(cond
			((< a (smaller-of b c) (+ (square b) (square c))))
			((< b (smaller-of a c) (+ (square a) (square c))))
			(else (+ (square b) (square c)))))
; a > b > c -> ab
; a > c > b -> ac
; b > a > c -> ab
; b > c > a -> bc
; c > a > b -> ac
; c > b > a -> bc
; a = b > c -> ab
; a = c > b -> ac
; b = c > a -> bc
; a > b = c -> ab or ac
; b > a = c -> ab or bc
; c > a = b -> ca or cb
; a = b = c -> ab or ac or bc

; We can actually unit test this.

(define (test-all f vals) (
	(andmap test-one f args)))
		
	; vals is
	; ((expected (a b c))
	;  (expected (a b c))
	;  ...
	;  (expected (a b c)))
	; f is just a function
	

; 1.3.?
(define (summation f first last)
	(if (= first last)
		(f first)
		(+ (f first) (summation f (+ 1 first) last))
	)
)

(define (summation2 f first last)
	(define (summation-iter f subtotal current last)
		(if (= current last)
			(+ subtotal (f current))
			(summation-iter f (+ subtotal (f current)) (+ current 1) last)
		)
	)
	(summation-iter f 0 first last)
)

	(if (= first last)
		(f first)
		(+ (f first) (summation f (+ 1 first) last))
	)
)


(define (product f first last)
	(define (product-iter result counter)
		(if (= counter last)
			(* result (f last))
			(product-iter (* (f counter) result) (+ counter 1))
		)
	)
	(product-iter 1 first)
)

(define accumulate accumulator f first last)

